﻿@{
    ViewData["Title"] = "My Calendar";
}

<main id="calendar">

    <nav class="header">

        <span class="signInText">Signed in as: </span>
        <span class="userEmail" ref="userEmail"> @ViewBag.UserEmail</span>
        <button class="logout" onclick="location.href='@Url.Action("Index", "Home")'">Logout</button>

    </nav>

        <div class="mainContent">

            <section class="fullCalendar">

                <section class="calendarControl">
                    <span class="currentMonthYear">{{currentMonthYear}}</span>
                    <div class="navButtons">
                        <button class="navButton" v-on:click="loadPreviousWeek" :disabled="previousDisabled"><</button>
                        <button class="navButton" v-on:click="loadNextWeek">></button>
                    </div>

                </section>

                <table class="calendarHeader">
                    <tr>
                        <th class="headerCell" v-for="(e, i) in 7" :key="i" :id="'headr' + i">
                            <p class="headerWeek">{{currentDates[i]}}</p>
                            <p class="headerDate">{{daysOfTheWeek[i]}}</p>
                        </th>
                    </tr>
                </table>

                <article id="calendarWrapper">
                    <table class="calendarTimeLabels">
                        <tr v-for="(e, i) in 9" :key="i">
                            <td id="'time' + i">
                                <p>0{{i+1}}:00</p>
                            </td>
                        </tr>
                        <tr v-for="(e, i) in 14" :key="i">
                            <td id="'time' + i">
                                <p>{{i+10}}:00</p>
                            </td>
                        </tr>
                    </table>

                    <table class="calendarBody">
                        <tr>
                            <td v-for="(e, i) in 7" :key="i" :id="'day' + i">
                                <button class="bookingButton" v-on:click="bookingSession($event)" v-for="(e, j) in 288" :key="j" :id="'but' + i + ',' + j" v-bind:ref="'but' + i + ',' + j">
                                </button>
                            </td>
                        </tr>
                    </table>
                </article>

            </section>

            <aside class="sideMenu">
                <p class="boldText"> Click on an empty region in the calendar to create booking slots:</p>
                <p v-for="(event, i) in bookedEventsPrint">
                    {{event.day}}, {{event.date}} {{monthsOfTheYear[event.month]}}, {{event.startHour}}:{{event.startMinute}}-{{event.endHour}}:{{event.endMinute}}
                    <button class="innerButton" v-on:click="removeBookingEvent(i)">&times;</button>
                </p>

                <input class="checkBox" v-model="enforcePeriod" type="checkbox" id="enforcePeriods" name="enforcePeriods" ref="enforcePeriods" v-on:change="frontEndValidation">
                <label for="enforcePeriods">Enforce time periods.</label>
                <p class="innerTextLabel" >Period name: </p>
                <input class="innerText" v-model="periodName" type="text" value="" maxlength="50" ref="periodName" name="periodName">
                <p class="innerTextLabel">Period (min): </p>
                <input class="innerText" v-model="period" type="text" value="" ref="period" maxlength="4" onkeypress="return (event.charCode == 8 || event.charCode == 0 || event.charCode == 13) ? null : event.charCode >= 48 && event.charCode <= 57">
                <button class="formButton" :disabled="noBookings" type="button" v-on:click="postToController">Submit</button>
                <p class="dynamicUrl" ref="dynamicUrl">{{shortUrl}}</p>

                <section class="longEvents">
                    <p class="boldText">List of long events:</p>
                    <ul>
                        <li v-for="event in longEvents">
                            <p>{{event.name}}</p>
                            <p class="eventDates">{{event.startDate}}/{{event.startMonth+1}}/{{event.startYear}} - {{event.endDate}}/{{event.endMonth+1}}/{{event.endYear}}</p>
                        </li>
                    </ul>
                </section>
            </aside>

        </div>

    <article class="bookingPopup" ref="popupContainer">
        <p class="popupTitle">Add a booking slot for {{popupDay}}, {{popupDate}} {{popupMonth}}</p>
        <div class="popupTime">
            <p class="popupTitle">Time:</p>
            <input class="outerText" type="text" value="" ref="inputTime">
        </div>
        <p ref="popupError"></p>
        <button class="outerButton" v-on:click="addBookingSession">Add</button>
        <button class="outerButton" v-on:click="cancelBookingSession">Cancel</button>
    </article>
    <div class="overlay" ref="popupOverlay" v-on:click="cancelBookingSession"></div>


</main>

<script type="text/javascript">
    
    var calendar = new Vue({
        el: '#calendar',
        data: {
            title: "Calendar",
            userEmail : "",
            previousButton: false,
            currentDate: "",
            date: "",
            weekDates: "",
            shortUrl: "",
            day: "",
            month: "",
            longEvents: [],
            enforcePeriod: false,
            periodName: "",
            period: "",
            popupDay: "",
            popupDate: "",
            popupMonth: "",
            popupYear: "",
            bookedEvents: [],
            bookedEventsPrint: [],
            eventsList: JSON.parse('@Html.Raw(Json.Serialize(ViewBag.EventsList))'),
            year: "",
            daysOfTheWeek: [
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "Sunday"
            ],
            monthsOfTheYear: [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December"
            ],
            daysInAMonth: [
                "31",
                "28",
                "31",
                "30",
                "31",
                "30",
                "31",
                "31",
                "30",
                "31",
                "30",
                "31"
            ],
            eventColors: [
                "#08364c", //peacock ID:null
                "#101428", //lavender ID:1
                "#163d2b", //sage ID:2
                "#391942", //grape ID:3
                "#2a0a07", //flamingo ID:4
                "#413103", //banana ID:5
                "#431203", //tangerine ID:6
                "#2A2B2A", //graphite ID:8
                "#161c3a", //blueberry ID:9
                "#264937", //basil ID:10
                "#4c0d0d" //tomato ID:11
            ]

        },
        created: function () {
            this.currentDate = new Date();
            this.date = this.currentDate.getDate();
            this.month = this.currentDate.getMonth();
            this.year = this.currentDate.getFullYear();
            this.day = this.currentDate.getDay();
            this.filterLongEvents();
            this.frontEndValidation();
        },
        mounted() {

            this.populateEvents();
            this.populateBookingEvents();
            this.frontEndValidation();
            this.userEmail = this.$refs.userEmail.innerHTML;
        },
        computed: {
            daysInFebruary: function () {

                if ((this.year % 4) == 0) {
                    daysInAMonth[1] = "29";
                }
                else {
                    daysInAMonth[1] = "28";
                }
            },
            previousDisabled: function () {
                if (this.year <= 2010) {
                    return !this.previousButton;
                }
            },
            currentMonthYear: function () {

                var date = this.date;
                var month = this.month;
                var year = this.year;
                var day = this.day; //Monday=1, Tuesday=2, Wednesday=3, Thursday=4, Friday=5, Saturday=6, Sunday=0

                //days of the week into array position: Monday=0, Tuesday=1,... Sunday=6
                if (day == 0) {
                    day = 6;
                }
                else {
                    day--;
                }

                //if a previous day in the week belongs to the previous month
                if ((date - day) <= 0) {
                    if (month == 0) {
                        return this.monthsOfTheYear[11] + "-" + this.monthsOfTheYear[month] + " " + year;
                    }
                    else {
                        return this.monthsOfTheYear[month - 1] + "-" + this.monthsOfTheYear[month] + " " + year;
                    }
                }

                //if there is a future day iin the week belonging to the next month
                else if ((date + 6 - day) > this.daysInAMonth[month]) {
                    if (month == 11) {
                        return this.monthsOfTheYear[month] + "-" + this.monthsOfTheYear[0] + " " + year;
                    }
                    else {
                        return this.monthsOfTheYear[month] + "-" + this.monthsOfTheYear[month + 1] + " " + year;
                    }

                }

                return this.monthsOfTheYear[month] + " " + year;

            },
            currentDates: function () {

                var date = this.date;
                var month = this.month;
                var day = this.day; //Monday=1, Tuesday=2, Wednesday=3, Thursday=4, Friday=5, Saturday=6, Sunday=0
                var year = this.year;



                return this.weekDayArray(day, date, month, year);

            },
            noBookings: ({ bookedEvents }) => bookedEvents.length === 0
        },

        methods: {
            //log for debugging and testing
            log() {


            },
            //given a day (Monday) and a date (1st), return a date for every day in the week
            weekDayArray(day, date, month, year) {

                //days of the week into array position: Monday=0, Tuesday=1,... Sunday=6
                if (day == 0) {
                    day = 6;
                }
                else {
                    day--;
                }

                if ((year % 4) == 0) {
                    this.daysInAMonth[1] = "29";
                }
                else {
                    this.daysInAMonth[1] = "28";
                }

                var originalDate = date;
                var dates = new Array(7);
                dates[day] = date;

                //fill the current day and all the proceeding days
                for (let i = day; i < dates.length && date <= this.daysInAMonth[month]; i++) {
                    dates[i] = date;
                    date++;
                }

                //if during a week, a month ends (current day) and a new one starts
                if (date > this.daysInAMonth[month] && dates[6] == null) {

                    if (dates[1] == null && dates[2] == null && dates[3] == null && dates[4] == null && dates[5] == null && dates[6] == null) {
                        for (let i = 1, j = 1; i < 7; i++, j++) {
                            dates[i] = j;
                        }
                    }
                    if (dates[2] == null && dates[3] == null && dates[4] == null && dates[5] == null && dates[6] == null) {
                        for (let i = 2, j = 1; i < 7; i++, j++) {
                            dates[i] = j;
                        }
                    }
                    if (dates[3] == null && dates[4] == null && dates[5] == null && dates[6] == null) {
                        for (let i = 3, j = 1; i < 7; i++, j++) {
                            dates[i] = j;
                        }
                    }
                    if (dates[4] == null && dates[5] == null && dates[6] == null) {
                        for (let i = 4, j = 1; i < 7; i++, j++) {
                            dates[i] = j;
                        }
                    }
                    if (dates[5] == null && dates[6] == null) {
                        for (let i = 5, j = 1; i < 7; i++, j++) {
                            dates[i] = j;
                        }
                    }
                    if (dates[6] == null) {
                        dates[6] = 1;
                    }
                }

                //reset the date
                date = originalDate;


                //fill the current day and all the preceding days
                for (let i = day; i >= 0 && date > 0; i--) {
                    dates[i] = date;
                    date--;
                }


                //if during a week, a month ends and a new one starts (current day)
                if (date == 0 && dates[0] == null) {
                    //grab the max number of days from previous month
                    var maxDays;
                    if (month == 0) {
                        maxDays = this.daysInAMonth[11];
                    }
                    else {
                        maxDays = this.daysInAMonth[month - 1];
                    }
                    if (dates[5] == null) {
                        for (let i = 5, j = maxDays; i >= 0; i--, j--) {
                            dates[i] = j;
                        }
                    }
                    if (dates[4] == null) {
                        for (let i = 4, j = maxDays; i >= 0; i--, j--) {
                            dates[i] = j;
                        }
                    }
                    if (dates[3] == null) {
                        for (let i = 3, j = maxDays; i >= 0; i--, j--) {
                            dates[i] = j;
                        }
                    }
                    if (dates[2] == null) {
                        for (let i = 2, j = maxDays; i >= 0; i--, j--) {
                            dates[i] = j;
                        }
                    }
                    if (dates[1] == null) {
                        for (let i = 1, j = maxDays; i >= 0; i--, j--) {
                            dates[i] = j;
                        }
                    }
                    if (dates[0] == null) {
                        dates[0] = maxDays;
                    }

                }
                this.weekDates = dates;
                return dates;
            },
            loadNextWeek() {

                //update currentMonthYear and currentDates[i]

                var date = this.date;
                var month = this.month;
                var year = this.year;
                var day = this.day;

                date = date + 7;
                if (date > this.daysInAMonth[month]) {
                    date = date - this.daysInAMonth[month];
                    if (month == 11) {
                        month = 0;
                        year++;
                    } else {
                        month++;
                    }
                }

                this.date = date;
                this.month = month;
                this.year = year;
                this.weekDayArray(day, date, month, year);

                //update events
                this.populateEvents();

                //update booked events
                this.populateBookingEvents();
            },
            loadPreviousWeek() {

                var date = this.date;
                var month = this.month;
                var year = this.year;
                var day = this.day;

                //update currentMonthYear and currentDates[i]
                date = date - 7;

                if (date <= 0) {
                    date = parseFloat(date) + parseFloat(this.daysInAMonth[month]);

                    if (month == 0) {
                        month = 11;
                        year--;
                    }
                    else {
                        month--;
                    }
                }

                this.date = date;
                this.month = month;
                this.year = year;

                this.weekDayArray(day, date, month, year);

                //update events
                this.populateEvents();

                //update booked events
                this.populateBookingEvents();

            },
            populateEvents() {

                //reset all buttons first
                for (let i = 0; i < 7; i++) {
                    for (let j = 0; j < 288; j++) {

                        var button = "but" + i + "," + j;

                        this.$refs[button][0].style.display = "block";
                        this.$refs[button][0].disabled = false;
                        this.$refs[button][0].style.width = "9vw";
                        this.$refs[button][0].style.height = "5px";
                        this.$refs[button][0].style.color = "#14213d";
                        this.$refs[button][0].style.background = "#14213d";
                        if ((j + 1) % 12 == 0) {
                            this.$refs[button][0].style["border-bottom"] = "1px solid #ffffff";
                        }
                        else {
                            this.$refs[button][0].style["border-bottom"] = "0px solid #ffffff";
                        }
                        this.$refs[button][0].style["border-top"] = "0px solid #ffffff";
                        this.$refs[button][0].style["border-right"] = "0px solid #ffffff";
                        this.$refs[button][0].style["border-left"] = "0px solid #ffffff";

                    }
                }

                //find all events in the current week from a fresh date
                var month = this.month;
                var year = this.year;

                var weekDays = this.weekDates;

                //helper variables to identify events spanning between two months
                var currentMonth = this.month;
                var nextMonth;
                var previousMonth;

                if (currentMonth == 11) {
                    nextMonth = 0;
                }
                else {
                    nextMonth = currentMonth + 1;
                }
                if (currentMonth == 0) {
                    previousMonth = 11;
                }
                else {
                    previousMonth = (currentMonth - 1);
                }

                for (let i = 0; i < this.eventsList.length; i++) {
                    //handle event regions that start this week
                    if (this.eventsList[i].startYear == year && this.eventsList[i].startMonth == month) {

                        for (let j = 0; j < weekDays.length; j++) {
                            if (this.eventsList[i].startDate == weekDays[j] && !(weekDays.includes(1) && weekDays[0] != 1 && this.date > 20 && this.eventsList[i].startDate < 10)) {



                                //get the first button from start hrs+min
                                var startHour = this.eventsList[i].startHour;
                                var startMinute = this.eventsList[i].startMinute;
                                var startDayOfWeek = this.eventsList[i].startDayOfWeek;

                                //index of button for already given day
                                var kStart;
                                if (startMinute == 0) {
                                    kStart = 0 + (12 * startHour);
                                } else {
                                    kStart = (startMinute / 5) + (12 * startHour);
                                }

                                var firstButton = "but" + this.daysOfTheWeek.indexOf(startDayOfWeek) + "," + kStart;

                                //get the last button from last hrs+min
                                var endHour = this.eventsList[i].endHour;
                                var endMinute = this.eventsList[i].endMinute;
                                var endDayOfWeek = this.eventsList[i].endDayOfWeek;

                                //index of last button for already given day
                                var kEnd;

                                if (endMinute == 0) {
                                    kEnd = 0 + (12 * endHour);
                                } else {
                                    kEnd = (endMinute / 5) + (12 * endHour);
                                }
                                //if the event ends on a different day, only consider buttons up to button 287
                                var daysInbetween = this.daysOfTheWeek.indexOf(endDayOfWeek) - this.daysOfTheWeek.indexOf(startDayOfWeek);
                                if (daysInbetween > 0 || daysInbetween == -6) {
                                    kEnd = 288;
                                }


                                this.$refs[firstButton][0].disabled = true;

                                //clean up Google's mess with event summary
                                var eventName = this.eventsList[i].name;
                                if (eventName == null) {
                                    eventName = "Event name not specified";
                                }
                                this.$refs[firstButton][0].innerText = eventName;

                                //clean up Google's mess with color IDs
                                var colorID = this.eventsList[i].colorID;
                                if (colorID == null) {
                                    colorID = 0;
                                }
                                else if (colorID > 6) {
                                    colorID--;
                                }

                                this.$refs[firstButton][0].style.background = this.eventColors[colorID];
                                this.$refs[firstButton][0].style.border = "1px solid" + this.eventColors[colorID];
                                this.$refs[firstButton][0].style.border = "1px solid #ffffff";
                                this.$refs[firstButton][0].style["border-radius"] = "1px";
                                this.$refs[firstButton][0].style.color = "#ffffff";

                                var deletedButton;
                                var deletedButtonsCount = 1;
                                for (let i = kStart + 1; i < kEnd; i++) {

                                    deletedButton = "but" + this.daysOfTheWeek.indexOf(startDayOfWeek) + "," + i;
                                    this.$refs[deletedButton][0].style.display = "none";
                                    deletedButtonsCount++;
                                }

                                this.$refs[firstButton][0].style.cursor = "default";
                                this.$refs[firstButton][0].style.height = 5 * deletedButtonsCount + "px";

                            }
                        }
                    }

                    //handle event regions that end this week
                    if ((this.eventsList[i].endYear == year && this.eventsList[i].endMonth == month && this.eventsList[i].startMonth == this.eventsList[i].endMonth && this.eventsList[i].startYear == this.eventsList[i].endYear) ||
                        (this.eventsList[i].endMonth == month && this.eventsList[i].startMonth == previousMonth && this.date < 15) ||
                        (this.eventsList[i].startMonth == month && this.eventsList[i].endMonth == nextMonth && this.date > 15)) {
                        for (let j = 0; j < weekDays.length; j++) {
                            if ((this.eventsList[i].endDate == weekDays[j]) && (this.eventsList[i].endDate != this.eventsList[i].startDate)) {

                                //get the last button from end hrs+min
                                var endHour = this.eventsList[i].endHour;
                                var endMinute = this.eventsList[i].endMinute;
                                var endDayOfWeek = this.eventsList[i].endDayOfWeek;

                                //index of last button for already given day
                                var kEnd;

                                if (endMinute == 0) {
                                    kEnd = 0 + (12 * endHour) - 1;
                                } else {
                                    kEnd = (endMinute / 5) + (12 * endHour) - 1;
                                }

                                var lastButton = "but" + this.daysOfTheWeek.indexOf(endDayOfWeek) + "," + kEnd;

                                this.$refs[lastButton][0].disabled = true;

                                //clean up Google's mess with event summary
                                var eventName = this.eventsList[i].name;
                                if (eventName == null) {
                                    eventName = "Event name not specified";
                                }
                                this.$refs[lastButton][0].innerText = eventName;
                                this.$refs[lastButton][0].style.color = "#ffffff";

                                //clean up Google's mess with color IDs
                                var colorID = this.eventsList[i].colorID;
                                if (colorID == null) {
                                    colorID = 0;
                                }
                                else if (colorID > 6) {
                                    colorID--;
                                }
                                this.$refs[lastButton][0].style.background = this.eventColors[colorID];

                                var deletedButton;
                                var deletedButtonsCount = 1;
                                for (let l = kEnd - 1; l >= 0; l--) {
                                    deletedButton = "but" + this.daysOfTheWeek.indexOf(endDayOfWeek) + "," + l;
                                    this.$refs[deletedButton][0].style.display = "none";
                                    deletedButtonsCount++;
                                }

                                this.$refs[lastButton][0].style.cursor = "default";
                                this.$refs[lastButton][0].style.height = 5 * deletedButtonsCount + "px";

                            }
                        }
                    }
                }
            },
            //all events that span over 3 or more days are placed in a list of events instead of the calendar
            filterLongEvents() {

                for (let i = this.eventsList.length - 1; i >= 0; i--) {
                    //difference between dates is 2 or more days
                    if (this.eventsList[i].endDate - this.eventsList[i].startDate > 1) {
                        this.longEvents.push(this.eventsList[i]);
                        this.eventsList.splice(i, 1);
                    }
                    //difference between dates is two or more months
                    else if (this.eventsList[i].endMonth - this.eventsList[i].startMonth > 1) {
                        this.longEvents.push(this.eventsList[i]);
                        this.eventsList.splice(i, 1);
                    }
                    //difference between dates is two or more years
                    else if (this.eventsList[i].endYear - this.eventsList[i].startYear > 1) {
                        this.longEvents.push(this.eventsList[i]);
                        this.eventsList.splice(i, 1);
                    }
                    //final case covers overlap between two months. Any event with starting date not the max of the month AND ending date not 1st of the month
                    else if ((this.eventsList[i].startMonth != this.eventsList[i].endMonth) && (this.eventsList[i].startDate < this.daysInAMonth[this.eventsList[i].startMonth] || this.eventsList[i].endDate > 1)) {
                        this.longEvents.push(this.eventsList[i]);
                        this.eventsList.splice(i, 1);
                    }
                }

                //remove all past events from the long events list
                for (let i = this.longEvents.length - 1; i >= 0; i--) {
                    if (this.longEvents[i].endYear < this.year) {
                        this.longEvents.splice(i, 1);
                    }
                    else if (this.longEvents[i].endYear == this.year && this.longEvents[i].endMonth < this.month) {
                        this.longEvents.splice(i, 1);
                    }
                    else if (this.longEvents[i].endYear == this.year && this.longEvents[i].endMonth == this.month && this.longEvents[i].endDate < this.date) {
                        this.longEvents.splice(i, 1);
                    }
                }

                //sort events from earliest endDate to latest endDate
                this.longEvents.sort(function (a, b) {
                    if (a.endYear == b.endYear && a.endMonth == b.endMonth) {
                        return a.endDate - b.endDate;
                    }
                    else if (a.endYear == b.endYear) {
                        return a.endMonth - b.endMonth;
                    }
                    return a.endYear - b.endYear;
                })

            },
            bookingSession(event) {

                //enable popup
                this.$refs.popupContainer.classList.add('active');
                this.$refs.popupOverlay.classList.add('active');

                //reset error messages
                this.$refs.popupError.innerHTML = "&nbsp;";


                //get day and starting hour from button ID
                var buttonID = event.currentTarget.id;
                buttonID = buttonID.substring(3);
                var tempArr = buttonID.split(',');
                var day = tempArr[0];
                var startingHour = Math.floor(tempArr[1] / 12);
                var endingHour;
                if (startingHour == 23) {
                    endingHour = 0;
                }
                else {
                    endingHour = startingHour + 1;
                }

                this.popupDay = this.daysOfTheWeek[day];
                this.popupDate = this.weekDates[day];

                //workout current month from date of a clicked button
                var month;
                if (this.popupDate < 15 && this.date > 15) {
                    if (this.month == 11) {
                        month = 0;
                    }
                    else {
                        month = this.month + 1;
                    }
                }
                else if (this.popupDate > 15 && this.date < 15) {
                    if (this.month == 0) {
                        month = 11;
                    }
                    else {
                        month = this.month - 1;
                    }
                }
                else {
                    month = this.month;
                }
                this.popupMonth = this.monthsOfTheYear[month];

                //workout current year from date of a clicked button
                var year;

                if (this.popupDate < 15 && this.date > 15 && this.month == 11) {
                    year = this.year + 1;
                    this.popupYear = year;
                }
                else if (this.popupDate > 15 && this.date < 15 && this.month == 0) {
                    year = this.year - 1;
                    this.popupYear = year;
                }
                this.popupYear = this.year;

                var timeFrame = startingHour + ":00-" + endingHour + ":00";

                this.$refs.inputTime.value = timeFrame;

            },
            addBookingSession() {

                //check if time is correct format (HH:MM-HH:MM or H:MM-H:MM)
                var timeFrame = this.$refs.inputTime.value;

                if (/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]-([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(timeFrame) == false) {

                    this.$refs.popupError.innerHTML = "Incorrect time format. Only HH:MM-HH:MM or H:MM-H:MM are valid.";

                    return;
                }

                //retrieve end/start hours/minutes from input
                var splitOnDash = timeFrame.split('-');
                var startSplit = splitOnDash[0].split(':');
                var endSplit = splitOnDash[1].split(':');

                var startHour = startSplit[0];
                var startMinute = startSplit[1];
                var endHour = endSplit[0];
                var endMinute = endSplit[1];

                //remove leading zeros
                startHour = parseInt(startHour, 10);
                startMinute = parseInt(startMinute, 10);
                endHour = parseInt(endHour, 10);
                endMinute = parseInt(endMinute, 10);

                //round down to nearest 5min
                if (startMinute % 10 == 1 || startMinute % 10 == 2 || startMinute % 10 == 3 || startMinute % 10 == 4) {
                    startMinute = startMinute.toString().slice(0, -1) + '0';
                    startMinute = parseInt(startMinute, 10);
                }
                else if (startMinute % 10 == 6 || startMinute % 10 == 7 || startMinute % 10 == 8 || startMinute % 10 == 9) {
                    startMinute = startMinute.toString().slice(0, -1) + '5';
                    startMinute = parseInt(startMinute, 10);
                }
                if (endMinute % 10 == 1 || endMinute % 10 == 2 || endMinute % 10 == 3 || endMinute % 10 == 4) {
                    endMinute = endMinute.toString().slice(0, -1) + '0';
                    endMinute = parseInt(endMinute, 10);
                }
                else if (endMinute % 10 == 6 || endMinute % 10 == 7 || endMinute % 10 == 8 || endMinute % 10 == 9) {
                    endMinute = endMinute.toString().slice(0, -1) + '5';
                    endMinute = parseInt(endMinute, 10);
                }

                //check if startTime < endTime
                if (((startHour > endHour) || (startHour == endHour && startMinute > endMinute)) && (endHour!=0)) {

                    this.$refs.popupError.innerHTML = "ERROR: Start time cannot be bigger than end time.";

                    return;
                }

                //check if booking is at least 5 minutes
                if (startHour == endHour && startMinute == endMinute) {

                    this.$refs.popupError.innerHTML = "ERROR: Start and end time must be at least 5 minutes apart.";

                    return;
                }

                //check if there is a clash with event
                var bookingStartMinutes = (startHour * 60) + startMinute;
                var bookingEndMinutes = endHour * 60 + endMinute;
                var eventStartMinutes;
                var eventEndMinutes;

                for (let i = 0; i < this.eventsList.length; i++) {

                    eventStartMinutes = (this.eventsList[i].startHour * 60) + this.eventsList[i].startMinute;
                    eventEndMinutes = (this.eventsList[i].endHour * 60) + this.eventsList[i].endMinute;

                    if ((bookingStartMinutes < eventEndMinutes) && (bookingEndMinutes > eventEndMinutes) && ((this.eventsList[i].endDate == this.popupDate) && (this.eventsList[i].endMonth == this.monthsOfTheYear.indexOf(this.popupMonth)) && (this.eventsList[i].endYear == this.popupYear))) {
                        this.$refs.popupError.innerHTML = "ERROR: Booking slot overlaps with an event.";
                        return;
                    }
                    else if ((bookingStartMinutes < eventStartMinutes) && (bookingEndMinutes > eventStartMinutes) && ((this.eventsList[i].startDate == this.popupDate) && (this.eventsList[i].startMonth == this.monthsOfTheYear.indexOf(this.popupMonth)) && (this.eventsList[i].startYear == this.popupYear))) {

                        this.$refs.popupError.innerHTML = "ERROR: Booking slot overlaps with an event.";
                        return;
                    }
                    else if ((bookingStartMinutes < eventStartMinutes) && (bookingEndMinutes > eventEndMinutes) && (this.eventsList[i].startDate == this.popupDate && this.eventsList[i].endDate == this.popupDate) && (this.eventsList[i].startMonth == this.monthsOfTheYear.indexOf(this.popupMonth) && this.eventsList[i].endMonth == this.monthsOfTheYear.indexOf(this.popupMonth)) && (this.eventsList[i].startYear == this.popupYear && this.eventsList[i].endYear == this.popupYear)) {

                        this.$refs.popupError.innerHTML = "ERROR: Booking slot overlaps with an event.";
                        return;
                    }
                }

                //check if there is a clash with booking event

                var bookedStartMinutes;
                var bookedEndMinutes;
                for (let i = 0; i < this.bookedEvents.length; i++) {

                    bookedStartMinutes = (this.bookedEvents[i].startHour * 60) + this.bookedEvents[i].startMinute;
                    bookedEndMinutes = (this.bookedEvents[i].endHour * 60) + this.bookedEvents[i].endMinute;

                    if ((bookingStartMinutes < bookedEndMinutes) && (bookingEndMinutes > bookedEndMinutes) && ((this.bookedEvents[i].date == this.popupDate) && (this.bookedEvents[i].month == this.monthsOfTheYear.indexOf(this.popupMonth)) && (this.bookedEvents[i].year == this.popupYear))) {

                        this.$refs.popupError.innerHTML = "ERROR: Booking slot overlaps with a booked event.";
                        return;
                    }
                    else if ((bookingStartMinutes < bookedStartMinutes) && (bookingEndMinutes > bookedStartMinutes) && ((this.bookedEvents[i].date == this.popupDate) && (this.bookedEvents[i].month == this.monthsOfTheYear.indexOf(this.popupMonth)) && (this.bookedEvents[i].year == this.popupYear))) {

                        this.$refs.popupError.innerHTML = "ERROR: Booking slot overlaps with a booked event.";
                        return;
                    }
                    else if ((bookingStartMinutes < bookedStartMinutes) && (bookingEndMinutes > bookedEndMinutes) && (this.bookedEvents[i].date == this.popupDate) && (this.bookedEvents[i].month == this.monthsOfTheYear.indexOf(this.popupMonth)) && (this.bookedEvents[i].year == this.popupYear)) {

                        this.$refs.popupError.innerHTML = "ERROR: Booking slot overlaps with a booked event.";
                        return;
                    }
                }

                //add booking object to a component array
                var bookingEvent = {
                    startHour: startHour,
                    startMinute: startMinute,
                    endHour: endHour,
                    endMinute: endMinute,
                    day: this.popupDay,
                    date: this.popupDate,
                    month: this.monthsOfTheYear.indexOf(this.popupMonth),
                    year: this.popupYear
                };

                this.bookedEvents.push(bookingEvent);

                var bookingEventPrint = {
                    startHour: startHour,
                    startMinute: startMinute,
                    endHour: endHour,
                    endMinute: endMinute,
                    day: this.popupDay,
                    date: this.popupDate,
                    month: this.monthsOfTheYear.indexOf(this.popupMonth),
                    year: this.popupYear
                };
                if (startMinute < 10) {
                    bookingEventPrint.startMinute = "0" + startMinute;
                }
                if (endMinute < 10) {
                    bookingEventPrint.endMinute = "0" + endMinute;
                }

                this.bookedEventsPrint.push(bookingEventPrint);

                //populate calendar with booking events
                this.populateBookingEvents();

                //disable popup
                this.$refs.popupOverlay.classList.remove('active');
                this.$refs.popupContainer.classList.remove('active');
                
            },
            cancelBookingSession() {

                //disable popup
                this.$refs.popupContainer.classList.remove('active');
                this.$refs.popupOverlay.classList.remove('active');

            },
            populateBookingEvents() {

                var weekDays = this.weekDates;

                for (let i = 0; i < this.bookedEvents.length; i++) {
                    if (this.bookedEvents[i].year == this.year && this.bookedEvents[i].month == this.month) {

                        for (let j = 0; j < weekDays.length; j++) {
                            if (this.bookedEvents[i].date == weekDays[j] && !(weekDays.includes(1) && weekDays[0] != 1 && this.date > 20 && this.bookedEvents[i].date < 10)) {


                                //get the first button from start hrs+min
                                var startHour = this.bookedEvents[i].startHour;
                                var startMinute = this.bookedEvents[i].startMinute;
                                var startDayOfWeek = this.bookedEvents[i].day;

                                //index of button for already given day
                                var kStart;
                                if (startMinute == 0) {
                                    kStart = 0 + (12 * startHour);
                                } else {
                                    kStart = (startMinute / 5) + (12 * startHour);
                                }

                                var firstButton = "but" + this.daysOfTheWeek.indexOf(startDayOfWeek) + "," + kStart;

                                //get the last button from last hrs+min
                                var endHour = this.bookedEvents[i].endHour;
                                var endMinute = this.bookedEvents[i].endMinute;

                                //index of last button for already given day
                                var kEnd;

                                if (endMinute == 0) {
                                    kEnd = 0 + (12 * endHour);
                                }
                                else {
                                    kEnd = (endMinute / 5) + (12 * endHour);
                                }
                                if (endMinute == 0 && endHour == 0) {
                                    kEnd = 288;
                                }

                                this.$refs[firstButton][0].disabled = true;

                                this.$refs[firstButton][0].innerText = "Booking slot";

                                this.$refs[firstButton][0].style.background = "#fca311";
                                this.$refs[firstButton][0].style.color = "#ffffff";

                                this.$refs[firstButton][0].style.border = "1px solid #ffffff";
                                this.$refs[firstButton][0].style["border-radius"] = "1px";

                                var deletedButton;
                                var deletedButtonsCount = 1;
                                for (let i = kStart + 1; i < kEnd; i++) {

                                    deletedButton = "but" + this.daysOfTheWeek.indexOf(startDayOfWeek) + "," + i;
                                    this.$refs[deletedButton][0].style.display = "none";
                                    deletedButtonsCount++;
                                }

                                this.$refs[firstButton][0].style.cursor = "default";
                                this.$refs[firstButton][0].style.height = 5 * deletedButtonsCount + "px";

                            }
                        }
                    }
                }
            },
            removeBookingEvent(i) {
                this.bookedEvents.splice(i, 1);
                this.bookedEventsPrint.splice(i, 1);
                this.populateEvents();
                this.populateBookingEvents();
            },
            postToController() {

                var shortURL = this.generateURL();
                this.shortUrl = "https://localhost:5001/BookingSession/" + shortURL;

                console.log(shortURL);

                axios({
                    method: 'post',
                    url: '/Calendar/BookingSession',
                    data: {
                        "shortUrl": shortURL,
                        "userEmail": this.$refs.userEmail.innerHTML,
                        "bookedEvents": JSON.stringify(this.bookedEvents),
                        "enforcePeriod": this.enforcePeriod,
                        "periodName": this.periodName,
                        "period": this.period
                    }
                })
                    .then(function (response) {
                        console.log(response);
                        console.log("HELOOO");
                        console.log("1: " + this.shortUrl);
                        console.log("2: " + this.shortUrl);
                        console.log("HELOOO");
                    })
                    .catch(function (error) {
                        console.log(error.response.data);
                        console.log("Err Axcios");

                    });

                
            },
            frontEndValidation() {

                //disable/enable periods on enforce checkbox 
                if (!(this.$refs.enforcePeriods.checked)) {
                    this.$refs.periodName.disabled = true;
                    this.$refs.period.disabled = true;
                    this.periodName = "No Period";
                    this.period = "No Period";
                    this.enforcePeriod = false;
                }
                else if (this.$refs.enforcePeriods.checked) {
                    this.$refs.periodName.disabled = false;
                    this.$refs.period.disabled = false;
                    this.enforcePeriod = true;
                }


                console.log(this.$refs.enforcePeriods);

            },
            generateURL() {

                var shortURL = "";
                var scheme = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
                var schemeLength = scheme.length;
                for (var i = 0; i < 21; i++) {
                    shortURL += scheme.charAt(Math.floor(Math.random() * schemeLength));
                }

                return shortURL;

            }
        }


    })
</script>









